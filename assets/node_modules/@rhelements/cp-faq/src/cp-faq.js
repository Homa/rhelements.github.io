import Rhelement from "../rhelement/rhelement.js";
import "https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.0/mark.min.js";
import "../cp-accordion/cp-accordion.js";

/**
 * Get the closest matching element up the DOM tree.
 * @private
 * @param  {Element} elem     Starting element
 * @param  {String}  selector Selector to match against
 * @return {Boolean|Element}  Returns null if not match found
 */
const getClosest = function(elem, selector) {
  // Element.matches() polyfill
  // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
  if (!Element.prototype.matches) {
    Element.prototype.matches =
      Element.prototype.matchesSelector ||
      Element.prototype.mozMatchesSelector ||
      Element.prototype.msMatchesSelector ||
      Element.prototype.oMatchesSelector ||
      Element.prototype.webkitMatchesSelector ||
      function(s) {
        var matches = (this.document || this.ownerDocument).querySelectorAll(s),
          i = matches.length;
        while (--i >= 0 && matches.item(i) !== this) {}
        return i > -1;
      };
  }

  // Get closest match
  for (; elem && elem !== document; elem = elem.parentNode) {
    if (elem.matches(selector)) return elem;
  }

  return null;
};

// String includes polyfill
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
if (!String.prototype.includes) {
  String.prototype.includes = function(search, start) {
    "use strict";
    if (typeof start !== "number") {
      start = 0;
    }

    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}

/*
 * DO NOT EDIT. This will be autopopulated with the
 * html from rhcc-freshnessgrade.html and css from
 * rhcc-freshnessgrade.css
 */
const template = document.createElement("template");
template.innerHTML = ``;
/* end DO NOT EDIT */

class CpFaq extends Rhelement {
  constructor() {
    super("cp-faq", template);
  }

  connectedCallback() {
    super.connectedCallback();

    const accordion = this.querySelector("cp-accordion");
    const headings = this.querySelectorAll("cp-accordion-heading");
    const headingsAndPanels = this.querySelectorAll(
      "cp-accordion-heading, cp-accordion-panel"
    );
    const markInstance = new Mark(headingsAndPanels);
    const input = this.shadowRoot.querySelector("input");

    const inputHandler = evt => {
      const keyword = input.value.toUpperCase().trim();
      const children = [...accordion.children];
      let timeout;

      clearTimeout(timeout);

      timeout = setTimeout(() => {
        if (keyword === "") {
          accordion.collapseAll();
          [...headings].forEach((heading, index) => {
            const panel = heading.nextElementSibling;

            requestAnimationFrame(() => {
              requestAnimationFrame(() => {
                heading.style.display = "";
                panel.style.display = "";
                panel.style.height = "";
                panel.classList.remove("animating");
              });
            });
          });
        } else {
          [...headings].forEach((heading, index) => {
            const panel = heading.nextElementSibling;
            const headingTextContent = heading.innerText.toUpperCase();
            const panelTextContent = panel.innerText.toUpperCase();

            if (
              !headingTextContent.includes(keyword) &&
              !panelTextContent.includes(keyword)
            ) {
              heading.style.display = "none";
              panel.style.display = "none";
            } else {
              heading.style.display = "";
              panel.style.display = "";
              accordion.expand(index);
            }
          });
        }
      }, 100);

      markInstance.unmark({
        done: () => {
          markInstance.mark(keyword, {
            separateWordSearch: false
          });
        }
      });
    };

    input.addEventListener("input", inputHandler);
  }
}

window.customElements.define("cp-faq", CpFaq);
